{"version":3,"sources":["utils/timespanHandler.js","ui/Button.js","ui/Chart.js","ui/LiveData.js","App.js","serviceWorker.js","index.js","utils/dataWrapper.js"],"names":["module","exports","_getTimespanDayLabels","iTimespan","iCurDate","aTimespanLabels","iCurDay","getDate","iDaysInLastMonth","this","_getDaysInMonth","getMonth","getFullYear","i","iDay","push","_getTimespanPredefinedLabels","oCurDate","aDefaultTimespanLabels","getDay","iTotalLabels","length","formatTimespanLabels","Date","iHour","getHours","iMonth","iYear","dataWrapper","require","Button","Number","props","name","split","aPromises","fetchChartData","Promise","all","then","fulfilled","main","setState","timespan","chartData","className","onClick","handleClick","bind","Component","LineChart","Line","lWidth","window","innerWidth","Chart","type","state","data","redraw","width","height","request","LiveData","iTemperature","iHumidity","iPressure","iAirQuality","temperature","humidity","pressure","airQuality","time","toLocaleTimeString","update","setInterval","url","process","method","json","error","response","body","statusCode","oLiveData","console","log","defaultTimespan","App","render","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","timespanHandler","sType","resolve","oData","aMinValues","aAvgValues","aMaxValues","min","avg","max","labels","datasets","label","fillColor","strokeColor","pointColor","pointHighlightStroke"],"mappings":"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","file":"static/js/main.49da341b.chunk.js","sourcesContent":["module.exports = {\r\n\t_getTimespanDayLabels: function(iTimespan, iCurDate) {\r\n\t\tlet aTimespanLabels = [];\r\n\t\tlet iCurDay = iCurDate.getDate();\r\n\t\tlet iDaysInLastMonth = this._getDaysInMonth(iCurDate.getMonth(), iCurDate.getFullYear());\r\n\r\n\t\tfor (let i = 0; i < iTimespan; i++) {\r\n\t\t\tlet iDay = iCurDay - iTimespan + i;\r\n\t\t\tif (iDay < 1) {\r\n\t\t\t\tiDay = iDay + iDaysInLastMonth;\r\n\t\t\t}\r\n\t\t\taTimespanLabels.push(iDay);\r\n\t\t}\r\n\r\n\t\treturn aTimespanLabels;\r\n\t},\r\n\r\n\t_getTimespanPredefinedLabels: function(iTimespan, oCurDate) {\r\n\t\tlet aTimespanLabels = [];\r\n\t\tlet aDefaultTimespanLabels = [];\r\n\t\tlet iCurDate = 0;\r\n\r\n\t\tswitch (iTimespan) {\r\n\t\t\tcase 7:\r\n\t\t\t\taDefaultTimespanLabels = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n\t\t\t\tiCurDate = oCurDate.getDay();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 365:\r\n\t\t\t\taDefaultTimespanLabels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\t\t\t\tiCurDate = oCurDate.getMonth();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tlet iTotalLabels = aDefaultTimespanLabels.length;\r\n\t\tfor (let i = 0; i < iTotalLabels; i++) {\r\n\t\t\tlet iDay = iCurDate - iTotalLabels + i;\r\n\t\t\tif (iDay < 0) {\r\n\t\t\t\tiDay = iDay + iTotalLabels;\r\n\t\t\t}\r\n\t\t\taTimespanLabels.push(aDefaultTimespanLabels[iDay]);\r\n\t\t}\r\n\r\n\t\treturn aTimespanLabels;\r\n\t},\r\n\r\n\tformatTimespanLabels: function(iTimespan) {\r\n\t\tlet aTimespanLabels = [];\r\n\t\tlet oCurDate = new Date();\r\n\r\n\t\tswitch (iTimespan) {\r\n\t\t\tcase 1: //one day\r\n\t\t\t\tlet iTotalHours = 24;\r\n\t\t\t\tfor (let i = 0; i < iTotalHours; i++) {\r\n\t\t\t\t\tlet iHour = oCurDate.getHours() - iTotalHours + i;\r\n\t\t\t\t\tif (iHour < 0) {\r\n\t\t\t\t\t\tiHour = iHour + iTotalHours;\r\n\t\t\t\t\t}\r\n\t\t\t\t\taTimespanLabels.push(iHour + \":00\")\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 7: //one week\r\n\t\t\t\taTimespanLabels = this._getTimespanPredefinedLabels(iTimespan, oCurDate);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 30: //one month\r\n\t\t\t\taTimespanLabels = this._getTimespanDayLabels(iTimespan, oCurDate);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 365: //one year\r\n\t\t\t\taTimespanLabels = this._getTimespanPredefinedLabels(iTimespan, oCurDate);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\taTimespanLabels = this._getTimespanDayLabels(iTimespan, oCurDate);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn aTimespanLabels;\r\n\t},\r\n\r\n\t_getDaysInMonth: function(iMonth, iYear) {\r\n\t\treturn new Date(iYear, iMonth, 0).getDate();\r\n\t}\r\n};\r\n","import React, {Component} from 'react';\r\n\r\nconst dataWrapper = require(\"../utils/dataWrapper\");\r\n\r\nclass Button extends Component {\r\n\thandleClick() {\r\n\t\tlet iTimespan = Number(this.props.name.split(\" \")[0]);\r\n\t\tlet aPromises = [\r\n\t\t\tdataWrapper.fetchChartData(\"temperature\", iTimespan),\r\n\t\t\tdataWrapper.fetchChartData(\"humidity\", iTimespan),\r\n\t\t\tdataWrapper.fetchChartData(\"pressure\", iTimespan),\r\n\t\t\tdataWrapper.fetchChartData(\"airQuality\", iTimespan)\r\n\t\t];\r\n\r\n\t\tPromise.all(aPromises).then((fulfilled) => {\r\n\t\t\tthis.props.main.setState({\r\n\t\t\t\ttimespan: iTimespan,\r\n\t\t\t\tchartData: fulfilled\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<button className=\"button\" onClick={this.handleClick.bind(this)}>{this.props.name}</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Button;\r\n","import React, {Component} from 'react';\r\n\r\nconst LineChart = require(\"react-chartjs\").Line;\r\nconst lWidth = window.innerWidth;\r\n\r\nclass Chart extends Component {\r\n\trender() {\r\n\t\tlet chartData = {};\r\n\r\n\t\tswitch (this.props.type) {\r\n\t\t\tcase \"Temperature\":\r\n\t\t\t\tchartData = this.props.main.state.chartData[0];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Humidity\":\r\n\t\t\t\tchartData = this.props.main.state.chartData[1];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Pressure\":\r\n\t\t\t\tchartData = this.props.main.state.chartData[2];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Air quality\":\r\n\t\t\t\tchartData = this.props.main.state.chartData[3];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"chart\">\r\n\t\t\t\t<p>{this.props.type} over the last {this.props.main.state.timespan} day(s)</p>\r\n\t\t\t\t<LineChart className=\"lineChart\" data={chartData} redraw width={lWidth - 25} height={250}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Chart;\r\n","import React, {Component} from 'react';\r\nimport '../css/LiveData.css';\r\n\r\nconst request = require('request');// require module\r\n\r\nclass LiveData extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.iTemperature = 0;\r\n\t\tthis.iHumidity = 0;\r\n\t\tthis.iPressure = 0;\r\n\t\tthis.iAirQuality = 0;\r\n\t\tthis.state = {\r\n\t\t\ttemperature: this.iTemperature,\r\n\t\t\thumidity: this.iHumidity,\r\n\t\t\tpressure: this.iPressure,\r\n\t\t\tairQuality: this.iAirQuality,\r\n\t\t\ttime: new Date().toLocaleTimeString()\r\n\t\t};\r\n\r\n\t\tthis.update = this.update.bind(this);\r\n\t\tsetInterval(this.update, 1000);\r\n\t}\r\n\r\n\tupdate() {\r\n\t\tlet oOptions = {\r\n\t\t\turl: process.env.REACT_APP_LIVE_SERVER,\r\n\t\t\tmethod: 'GET',\r\n\t\t\tjson: true\r\n\t\t};\r\n\t\trequest(oOptions, function (error, response, body) {\r\n\t\t\tif (!error && response.statusCode === 200 && body) {\r\n\t\t\t\tlet oLiveData = body;\r\n\t\t\t\tthis.iTemperature = oLiveData.temperature;\r\n\t\t\t\tthis.iHumidity = oLiveData.humidity;\r\n\t\t\t\tthis.iPressure = oLiveData.pressure;\r\n\t\t\t\tthis.iAirQuality = oLiveData.airQuality;\r\n\t\t\t} else if (error) {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.iTemperature !== 0 && this.iHumidity !== 0 && this.iPressure !== 0 && this.iAirQuality !== 0) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttemperature: this.iTemperature,\r\n\t\t\t\t\thumidity: this.iHumidity,\r\n\t\t\t\t\tpressure: this.iPressure,\r\n\t\t\t\t\tairQuality: this.iAirQuality,\r\n\t\t\t\t\ttime: new Date().toLocaleTimeString()\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttime: new Date().toLocaleTimeString()\r\n\t\t\t\t});\r\n\t\t\t\tconsole.log(\"broke\");\r\n\t\t\t}\r\n\t\t}.bind(this));\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className={\"liveData\"}>\r\n\t\t\t\t\t<p>Temperature: {this.state.temperature}°C | Humidity: {this.state.humidity}% |\r\n\t\t\t\t\t\tPressure: {this.state.pressure}mBar | Air quality: {this.state.airQuality}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"time\"}>\r\n\t\t\t\t\t<p>{this.state.time}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default LiveData;\r\n","import React, {Component} from 'react';\r\nimport Button from './ui/Button';\r\nimport Chart from './ui/Chart';\r\nimport LiveData from './ui/LiveData';\r\nimport './css/App.css';\r\n\r\nconst dataWrapper = require(\"./utils/dataWrapper\");\r\nconst defaultTimespan = 1; //One day\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttimespan: defaultTimespan,\r\n\t\t\tchartData: [{},{},{},{}]\r\n\t\t};\r\n\t\tlet aPromises = [\r\n\t\t\tdataWrapper.fetchChartData(\"temperature\", defaultTimespan),\r\n\t\t\tdataWrapper.fetchChartData(\"humidity\", defaultTimespan),\r\n\t\t\tdataWrapper.fetchChartData(\"pressure\", defaultTimespan),\r\n\t\t\tdataWrapper.fetchChartData(\"airQuality\", defaultTimespan)\r\n\t\t];\r\n\t\tPromise.all(aPromises).then((fulfilled) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttimespan: defaultTimespan,\r\n\t\t\t\tchartData: fulfilled\r\n\t\t\t});\r\n\t\t\tthis.render();\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t<LiveData/>\r\n\t\t\t\t<div className=\"buttons\">\r\n\t\t\t\t\t<Button name={\"365 days\"} main={this}/>\r\n\t\t\t\t\t<Button name={\"30 days\"} main={this}/>\r\n\t\t\t\t\t<Button name={\"7 days\"} main={this}/>\r\n\t\t\t\t\t<Button name={\"1 day\"}  main={this}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Chart type={\"Temperature\"} main={this}/>\r\n\t\t\t\t<Chart type={\"Humidity\"} main={this}/>\r\n\t\t\t\t<Chart type={\"Pressure\"} main={this}/>\r\n\t\t\t\t<Chart type={\"Air quality\"} main={this}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === 'localhost' ||\r\n\t// [::1] is the IPv6 localhost address.\r\n\twindow.location.hostname === '[::1]' ||\r\n\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\twindow.location.hostname.match(\r\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t)\r\n);\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\r\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\r\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error('Error during service worker registration:', error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get('content-type');\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t'No internet connection found. App is running in offline mode.'\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const timespanHandler = require(\"./timespanHandler\");\r\nconst request = require('request');\r\n\r\nmodule.exports = {\r\n\tfetchChartData: function (sType, iTimespan) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tlet oOptions = {\r\n\t\t\t\turl: process.env.REACT_APP_DB_SERVER + sType,\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\tjson: true\r\n\t\t\t};\r\n\r\n\t\t\trequest(oOptions, function (error, response, body) {\r\n\t\t\t\tif (!error && response.statusCode === 200) {\r\n\r\n\t\t\t\t\tlet aTimespanLabels = timespanHandler.formatTimespanLabels(iTimespan),\r\n\t\t\t\t\t\toData = body,\r\n\t\t\t\t\t\taMinValues = [],\r\n\t\t\t\t\t\taAvgValues = [],\r\n\t\t\t\t\t\taMaxValues = [];\r\n\r\n\t\t\t\t\tif (oData && oData[iTimespan]) {\r\n\t\t\t\t\t\taMinValues = oData[iTimespan].min ? oData[iTimespan].min : [];\r\n\t\t\t\t\t\taAvgValues = oData[iTimespan].avg ? oData[iTimespan].avg : [];\r\n\t\t\t\t\t\taMaxValues = oData[iTimespan].max ? oData[iTimespan].max : [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresolve({\r\n\t\t\t\t\t\tlabels: aTimespanLabels,\r\n\t\t\t\t\t\tdatasets: [{\r\n\t\t\t\t\t\t\tlabel: \"Min. \" + sType,\r\n\t\t\t\t\t\t\tfillColor: \"rgba(220,220,220,0.2)\",\r\n\t\t\t\t\t\t\tstrokeColor: \"rgba(220,220,220,1)\",\r\n\t\t\t\t\t\t\tpointColor: \"rgba(220,220,220,1)\",\r\n\t\t\t\t\t\t\tpointHighlightStroke: \"rgba(220,220,220,1)\",\r\n\t\t\t\t\t\t\tdata: aMinValues\r\n\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\tlabel: \"Average \" + sType,\r\n\t\t\t\t\t\t\tfillColor: \"rgba(220,220,220,0.2)\",\r\n\t\t\t\t\t\t\tstrokeColor: \"rgba(220,220,220,1)\",\r\n\t\t\t\t\t\t\tpointColor: \"rgba(220,220,220,1)\",\r\n\t\t\t\t\t\t\tpointHighlightStroke: \"rgba(220,220,220,1)\",\r\n\t\t\t\t\t\t\tdata: aAvgValues\r\n\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\tlabel: \"Max. \" + sType,\r\n\t\t\t\t\t\t\tfillColor: \"rgba(220,220,220,0.2)\",\r\n\t\t\t\t\t\t\tstrokeColor: \"rgba(220,220,220,1)\",\r\n\t\t\t\t\t\t\tpointColor: \"rgba(220,220,220,1)\",\r\n\t\t\t\t\t\t\tpointHighlightStroke: \"rgba(220,220,220,1)\",\r\n\t\t\t\t\t\t\tdata: aMaxValues\r\n\t\t\t\t\t\t}]\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n};"],"sourceRoot":""}